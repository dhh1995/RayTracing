!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	shapes/trianglemesh.h	/^	Vec3f A, B, C, mNorm; \/\/, mU, mV;$/;"	m	class:Raytracer::Triangle
ACCELERATORS_BRUTE_H	accelerators/brute.h	3;"	d
AreaLight	core/light.h	/^	AreaLight(Vec3f aColor, Color aPos, Vec3f aNorm, Vec3f aU)$/;"	f	class:Raytracer::AreaLight
AreaLight	core/light.h	/^class AreaLight : public Light{$/;"	c	namespace:Raytracer
Array	obj_parser/SimpleObject.h	/^    template <typename T, int N> class Array $/;"	c	namespace:Raytracer
B	shapes/trianglemesh.h	/^	Vec3f A, B, C, mNorm; \/\/, mU, mV;$/;"	m	class:Raytracer::Triangle
BACKGROUND	core/common.h	/^const Color BACKGROUND = BLACK;$/;"	m	namespace:Raytracer
BLACK	core/common.h	/^const Color BLACK	= Color(0., 0., 0.);$/;"	m	namespace:Raytracer
BLUE	core/common.h	/^const Color BLUE	= Color(0., 0., 1.);$/;"	m	namespace:Raytracer
BSDF	core/reflection.cpp	/^BSDF::BSDF(){$/;"	f	class:Raytracer::BSDF
BSDF	core/reflection.h	/^class BSDF{$/;"	c	namespace:Raytracer
BUMP	core/texture.h	/^		BUMP,$/;"	e	enum:Raytracer::Texture::TYPE
Box	shapes/box.h	/^	Box(){$/;"	f	class:Raytracer::Box
Box	shapes/box.h	/^	Box(const Vec3f &A):mMin(A), mMax(A){$/;"	f	class:Raytracer::Box
Box	shapes/box.h	/^class Box : public Primitive{$/;"	c	namespace:Raytracer
Brute	accelerators/brute.h	/^class Brute{$/;"	c
BumpTexture	core/texture.h	/^class BumpTexture : public ImgTexture{$/;"	c	namespace:Raytracer
C	shapes/trianglemesh.h	/^	Vec3f A, B, C, mNorm; \/\/, mU, mV;$/;"	m	class:Raytracer::Triangle
CORE_CAMERA_H	core/camera.h	3;"	d
CORE_COMMON_H	core/common.h	3;"	d
CORE_FILM_H	core/film.h	3;"	d
CORE_GEOMETRY_H	core/geometry.h	3;"	d
CORE_INTERSECTION_H	core/intersection.h	3;"	d
CORE_KDTREE_H	core/kdtree.h	3;"	d
CORE_LIGHT_H	core/light.h	3;"	d
CORE_MATERIAL_H	core/material.h	3;"	d
CORE_PHOTON_H	core/photon.h	3;"	d
CORE_PRIMITIVE_H	core/primitive.h	3;"	d
CORE_REFLECTION_H	core/reflection.h	3;"	d
CORE_RENDERER_H	core/renderer.h	3;"	d
CORE_SAMPLER_H	core/sampler.h	3;"	d
CORE_SCENE_H	core/scene.h	3;"	d
CORE_TESTRENDER_H	renderers/testrenderer.h	3;"	d
CORE_TEXTURE_H	core/texture.h	3;"	d
CORE_TRANSFORM_H	core/transform.h	3;"	d
CSimpleObject	obj_parser/SimpleObject.cpp	/^    CSimpleObject::CSimpleObject(void)$/;"	f	class:Raytracer::CSimpleObject
CSimpleObject	obj_parser/SimpleObject.h	/^    class CSimpleObject$/;"	c	namespace:Raytracer
CYAN	core/common.h	/^const Color CYAN 		= Color( 0 , 255, 255) \/ 255.;$/;"	m	namespace:Raytracer
Camera	core/camera.h	/^	Camera(Vec3f aPos) : mPos(aPos){$/;"	f	class:Raytracer::Camera
Camera	core/camera.h	/^class Camera{$/;"	c	namespace:Raytracer
CheckParse	obj_parser/SimpleObject.cpp	/^    bool CSimpleObject::CheckParse(int nVertices,std::vector<Array<int,3> > & vecTriangles)$/;"	f	class:Raytracer::CSimpleObject
Color	core/common.h	/^typedef Vec3f Color;$/;"	t	namespace:Raytracer
DARKBLUE	core/common.h	/^const Color DARKBLUE	= Color( 0 ,  0 , 139) \/ 255.;$/;"	m	namespace:Raytracer
DARKGREEN	core/common.h	/^const Color DARKGREEN	= Color( 0 , 100,  0 ) \/ 255.;$/;"	m	namespace:Raytracer
Destroy	obj_parser/SimpleObject.cpp	/^    void CSimpleObject::Destroy()$/;"	f	class:Raytracer::CSimpleObject
EPS	core/geometry.h	/^const real EPS = 1e-5;$/;"	m	namespace:Raytracer
FILM_IMAGE_H	film/image.h	3;"	d
Film	core/film.h	/^	Film(int w, int h):w(w), h(h){$/;"	f	class:Raytracer::Film
Film	core/film.h	/^class Film{$/;"	c	namespace:Raytracer
GREEN	core/common.h	/^const Color GREEN	= Color(0., 1., 0.);$/;"	m	namespace:Raytracer
HIT	core/common.h	17;"	d
IMAGE	core/texture.h	/^		IMAGE,$/;"	e	enum:Raytracer::Texture::TYPE
INF	core/common.h	/^const real INF = 1e18;$/;"	m	namespace:Raytracer
INPRIM	core/common.h	19;"	d
Image	film/image.h	/^	Image(int w, int h):Film(w, h){$/;"	f	class:Raytracer::Image
Image	film/image.h	/^	Image(string path):Film(-1, -1){$/;"	f	class:Raytracer::Image
Image	film/image.h	/^class Image : public Film {$/;"	c	namespace:Raytracer
ImgTexture	core/texture.h	/^class ImgTexture : public Texture{$/;"	c	namespace:Raytracer
Intersection	core/intersection.h	/^	Intersection(Primitive* aPrim = NULL, Vec3f aPos = ORIGINAL, real aDist = INF) : mPrim(aPrim), mPos(aPos), mDist(aDist){$/;"	f	class:Raytracer::Intersection
Intersection	core/intersection.h	/^class Intersection{$/;"	c	namespace:Raytracer
IsLoaded	obj_parser/SimpleObject.h	/^        bool IsLoaded() { return m_pVertexList!=NULL;}$/;"	f	class:Raytracer::CSimpleObject
KdNode	core/kdtree.h	/^		KdNode(){$/;"	f	struct:Raytracer::KdTreeTri::KdNode
KdNode	core/kdtree.h	/^	struct KdNode{$/;"	s	class:Raytracer::KdTree
KdNode	core/kdtree.h	/^	struct KdNode{$/;"	s	class:Raytracer::KdTreeTri
KdTree	core/kdtree.h	/^	KdTree(int MaxK = MAX_K_NEAREST){$/;"	f	class:Raytracer::KdTree
KdTree	core/kdtree.h	/^class KdTree{$/;"	c	namespace:Raytracer
KdTreeTri	core/kdtree.h	/^	KdTreeTri(){$/;"	f	class:Raytracer::KdTreeTri
KdTreeTri	core/kdtree.h	/^class KdTreeTri{$/;"	c	namespace:Raytracer
L2	core/geometry.h	/^	inline real L2(){$/;"	f	class:Raytracer::Vec3f
LIGHTGREEN	core/common.h	/^const Color LIGHTGREEN	= Color(144, 238, 144) \/ 255.;$/;"	m	namespace:Raytracer
LIGHTPINK	core/common.h	/^const Color LIGHTPINK	= Color(255, 182, 193) \/ 255.;$/;"	m	namespace:Raytracer
Light	core/light.h	/^	Light(Color aColor, Vec3f aPos) : mColor(aColor), mPos(aPos){$/;"	f	class:Raytracer::Light
Light	core/light.h	/^class Light{$/;"	c	namespace:Raytracer
LoadFromObj	obj_parser/SimpleObject.cpp	/^    bool CSimpleObject::LoadFromObj(const char* fn)$/;"	f	class:Raytracer::CSimpleObject
MAX_KDTREE_LEAF_SIZE	core/common.h	/^const int MAX_KDTREE_LEAF_SIZE = 3;$/;"	m	namespace:Raytracer
MAX_K_NEAREST	core/common.h	/^const int MAX_K_NEAREST = 112345;$/;"	m	namespace:Raytracer
MISS	core/common.h	18;"	d
Material	core/material.h	/^	Material(Color aColor, real aRefl, real aRefr, real aDiff, real aSpec, real aRIndex = 1, Color Ka = BLACK)$/;"	f	class:Raytracer::Material
Material	core/material.h	/^class Material{$/;"	c	namespace:Raytracer
Matrix44	core/transform.cpp	/^Matrix44::Matrix44(){$/;"	f	class:Raytracer::Matrix44
Matrix44	core/transform.cpp	/^Matrix44::Matrix44(real mat[4][4]){$/;"	f	class:Raytracer::Matrix44
Matrix44	core/transform.cpp	/^Matrix44::Matrix44(real t00, real t01, real t02, real t03,$/;"	f	class:Raytracer::Matrix44
Matrix44	core/transform.h	/^struct Matrix44{$/;"	s	namespace:Raytracer
Normalize	core/geometry.h	/^	inline Vec3f Normalize(){$/;"	f	class:Raytracer::Vec3f
OBJPARSER_SIMPLEOBJECT_H	obj_parser/SimpleObject.h	3;"	d
ORIGINAL	core/common.h	/^const Vec3f ORIGINAL = Vec3f(0., 0., 0.);$/;"	m	namespace:Raytracer
PI	core/common.h	/^const real PI = acos(-1.);$/;"	m	namespace:Raytracer
PINK	core/common.h	/^const Color PINK 		= Color(255, 192, 203) \/ 255.;$/;"	m	namespace:Raytracer
PURPLE	core/common.h	/^const Color PURPLE		= Color(128,  0 , 128) \/ 255.;$/;"	m	namespace:Raytracer
Parse	obj_parser/SimpleObject.cpp	/^    bool CSimpleObject::Parse(FILE* fp)$/;"	f	class:Raytracer::CSimpleObject
PerspectiveCamera	core/camera.h	/^	PerspectiveCamera(Vec3f aPos, Vec3f aLookAt, Vec3f aI, real aFov, real aLensRadius, real aFocalDistance)$/;"	f	class:Raytracer::PerspectiveCamera
PerspectiveCamera	core/camera.h	/^class PerspectiveCamera : public ProjectiveCamera{$/;"	c	namespace:Raytracer
Photon	core/photon.h	/^class Photon{$/;"	c	namespace:Raytracer
PhotonCmp	core/kdtree.cpp	/^bool PhotonCmp(const Photon* A, const Photon* B){$/;"	f	namespace:Raytracer
Plane	shapes/plane.h	/^	Plane(Vec3f aNorm, Vec3f aU, Vec3f aPos) : mNorm(aNorm), mU(aU){$/;"	f	class:Raytracer::Plane
Plane	shapes/plane.h	/^	Plane(Vec3f aNorm, Vec3f aU, real aD) : mNorm(aNorm), mU(aU), mD(aD){$/;"	f	class:Raytracer::Plane
Plane	shapes/plane.h	/^class Plane : public Primitive{$/;"	c	namespace:Raytracer
Primitive	core/primitive.h	/^	Primitive():mMaterial(NULL){$/;"	f	class:Raytracer::Primitive
Primitive	core/primitive.h	/^class Primitive{$/;"	c	namespace:Raytracer
ProjectiveCamera	core/camera.h	/^	ProjectiveCamera(Vec3f aPos, Vec3f aLookAt, Vec3f aI, real aFov)$/;"	f	class:Raytracer::ProjectiveCamera
ProjectiveCamera	core/camera.h	/^class ProjectiveCamera : public Camera{$/;"	c	namespace:Raytracer
RED	core/common.h	/^const Color RED		= Color(1., 0., 0.);$/;"	m	namespace:Raytracer
Ray	core/geometry.h	/^	Ray(const Vec3f &o, const Vec3f &d, int aFilmX = -1, int aFilmY = -1)$/;"	f	class:Raytracer::Ray
Ray	core/geometry.h	/^class Ray{$/;"	c	namespace:Raytracer
Raytracer	core/camera.cpp	/^namespace Raytracer {$/;"	n	file:
Raytracer	core/camera.h	/^namespace Raytracer {$/;"	n
Raytracer	core/common.h	/^namespace Raytracer {$/;"	n
Raytracer	core/film.cpp	/^namespace Raytracer {$/;"	n	file:
Raytracer	core/film.h	/^namespace Raytracer {$/;"	n
Raytracer	core/geometry.cpp	/^namespace Raytracer {$/;"	n	file:
Raytracer	core/geometry.h	/^namespace Raytracer {$/;"	n
Raytracer	core/intersection.cpp	/^namespace Raytracer {$/;"	n	file:
Raytracer	core/intersection.h	/^namespace Raytracer {$/;"	n
Raytracer	core/kdtree.cpp	/^namespace Raytracer {$/;"	n	file:
Raytracer	core/kdtree.h	/^namespace Raytracer {$/;"	n
Raytracer	core/light.cpp	/^namespace Raytracer {$/;"	n	file:
Raytracer	core/light.h	/^namespace Raytracer {$/;"	n
Raytracer	core/material.cpp	/^namespace Raytracer {$/;"	n	file:
Raytracer	core/material.h	/^namespace Raytracer {$/;"	n
Raytracer	core/photon.cpp	/^namespace Raytracer {$/;"	n	file:
Raytracer	core/photon.h	/^namespace Raytracer {$/;"	n
Raytracer	core/primitive.cpp	/^namespace Raytracer {$/;"	n	file:
Raytracer	core/primitive.h	/^namespace Raytracer {$/;"	n
Raytracer	core/reflection.cpp	/^namespace Raytracer {$/;"	n	file:
Raytracer	core/reflection.h	/^namespace Raytracer {$/;"	n
Raytracer	core/renderer.cpp	/^namespace Raytracer {$/;"	n	file:
Raytracer	core/renderer.h	/^namespace Raytracer {$/;"	n
Raytracer	core/sampler.cpp	/^namespace Raytracer {$/;"	n	file:
Raytracer	core/sampler.h	/^namespace Raytracer {$/;"	n
Raytracer	core/scene.cpp	/^namespace Raytracer {$/;"	n	file:
Raytracer	core/scene.h	/^namespace Raytracer {$/;"	n
Raytracer	core/texture.cpp	/^namespace Raytracer {$/;"	n	file:
Raytracer	core/texture.h	/^namespace Raytracer {$/;"	n
Raytracer	core/transform.cpp	/^namespace Raytracer {$/;"	n	file:
Raytracer	core/transform.h	/^namespace Raytracer {$/;"	n
Raytracer	film/image.cpp	/^namespace Raytracer {$/;"	n	file:
Raytracer	film/image.h	/^namespace Raytracer {$/;"	n
Raytracer	obj_parser/SimpleObject.cpp	/^namespace Raytracer$/;"	n	file:
Raytracer	obj_parser/SimpleObject.h	/^namespace Raytracer$/;"	n
Raytracer	renderers/testrenderer.cpp	/^namespace Raytracer {$/;"	n	file:
Raytracer	renderers/testrenderer.h	/^namespace Raytracer {$/;"	n
Raytracer	shapes/box.cpp	/^namespace Raytracer {$/;"	n	file:
Raytracer	shapes/box.h	/^namespace Raytracer {$/;"	n
Raytracer	shapes/plane.cpp	/^namespace Raytracer {$/;"	n	file:
Raytracer	shapes/plane.h	/^namespace Raytracer {$/;"	n
Raytracer	shapes/sphere.cpp	/^namespace Raytracer {$/;"	n	file:
Raytracer	shapes/sphere.h	/^namespace Raytracer {$/;"	n
Raytracer	shapes/trianglemesh.cpp	/^namespace Raytracer {$/;"	n	file:
Raytracer	shapes/trianglemesh.h	/^namespace Raytracer {$/;"	n
Renderer	core/renderer.h	/^	Renderer() : mCamera(NULL), mScene(NULL){$/;"	f	class:Raytracer::Renderer
Renderer	core/renderer.h	/^class Renderer{$/;"	c	namespace:Raytracer
SHAPES_BOX_H	shapes/box.h	3;"	d
SHAPES_PLANE_H	shapes/plane.h	3;"	d
SHAPES_SPHERE_H	shapes/sphere.h	3;"	d
SHAPES_TRIANGLEMESH_H	shapes/trianglemesh.h	3;"	d
SKYBLUE	core/common.h	/^const Color SKYBLUE 	= Color(135, 206, 235) \/ 255.;$/;"	m	namespace:Raytracer
Sampler	core/sampler.h	/^class Sampler{$/;"	c	namespace:Raytracer
SaveToObj	obj_parser/SimpleObject.cpp	/^    bool CSimpleObject::SaveToObj(const char* fn)$/;"	f	class:Raytracer::CSimpleObject
Scene	core/scene.h	/^	Scene(Color aAmbient = BLACK): mAmbient(aAmbient){$/;"	f	class:Raytracer::Scene
Scene	core/scene.h	/^class Scene{$/;"	c	namespace:Raytracer
Sphere	shapes/sphere.h	/^	Sphere(Vec3f aCentre, real aRadius) : mCentre(aCentre), mRadius(aRadius){$/;"	f	class:Raytracer::Sphere
Sphere	shapes/sphere.h	/^class Sphere : public Primitive{$/;"	c	namespace:Raytracer
TRACEDEPTH	core/common.h	/^const int TRACEDEPTH = 5;$/;"	m	namespace:Raytracer
TYPE	core/texture.h	/^	enum TYPE{$/;"	g	class:Raytracer::Texture
TestRenderer	renderers/testrenderer.h	/^	TestRenderer():mRaysCast(0){$/;"	f	class:Raytracer::TestRenderer
TestRenderer	renderers/testrenderer.h	/^class TestRenderer : public Renderer {$/;"	c	namespace:Raytracer
Texture	core/texture.h	/^	Texture(Film* aImg, int aUScale = 1, int aVScale = 1){$/;"	f	class:Raytracer::Texture
Texture	core/texture.h	/^class Texture{$/;"	c	namespace:Raytracer
Transform	core/transform.cpp	/^Transform::Transform(){$/;"	f	class:Raytracer::Transform
Transform	core/transform.cpp	/^Transform::Transform(const Matrix44 &mat)$/;"	f	class:Raytracer::Transform
Transform	core/transform.cpp	/^Transform::Transform(real mat[4][4]){$/;"	f	class:Raytracer::Transform
Transform	core/transform.h	/^class Transform{$/;"	c	namespace:Raytracer
Transpose	core/transform.cpp	/^Matrix44 Matrix44::Transpose(){$/;"	f	class:Raytracer::Matrix44
Triangle	shapes/trianglemesh.h	/^	Triangle(Vec3f A, Vec3f B, Vec3f C):A(A), B(B), C(C){$/;"	f	class:Raytracer::Triangle
Triangle	shapes/trianglemesh.h	/^class Triangle : public Primitive{$/;"	c	namespace:Raytracer
TriangleMesh	shapes/trianglemesh.cpp	/^TriangleMesh::TriangleMesh(string objFile, Material* aMaterial, Vec3f trans){$/;"	f	class:Raytracer::TriangleMesh
TriangleMesh	shapes/trianglemesh.h	/^class TriangleMesh : public Primitive{$/;"	c	namespace:Raytracer
VIOLET	core/common.h	/^const Color VIOLET		= Color(238, 130, 238) \/ 255.;$/;"	m	namespace:Raytracer
Vec3f	core/geometry.h	/^	Vec3f(){$/;"	f	class:Raytracer::Vec3f
Vec3f	core/geometry.h	/^	Vec3f(const Vec3f& v){$/;"	f	class:Raytracer::Vec3f
Vec3f	core/geometry.h	/^	Vec3f(real x,real y, real z):$/;"	f	class:Raytracer::Vec3f
Vec3f	core/geometry.h	/^class Vec3f{$/;"	c	namespace:Raytracer
WHITE	core/common.h	/^const Color WHITE	= Color(1., 1., 1.);$/;"	m	namespace:Raytracer
YELLOW	core/common.h	/^const Color YELLOW 		= Color(255, 255,  0 ) \/ 255.;$/;"	m	namespace:Raytracer
ZERO	core/common.h	/^const Vec3f ZERO 	 = Vec3f(0., 0., 0.);$/;"	m	namespace:Raytracer
_len	core/geometry.h	/^	enum {_len = 3};$/;"	e	enum:Raytracer::Vec3f::__anon5
_len	obj_parser/SimpleObject.h	/^        enum {_len = N};$/;"	e	enum:Raytracer::Array::__anon6
_p	core/geometry.h	/^			real _p[3];$/;"	m	struct:Raytracer::Vec3f::__anon1::__anon2
_p	obj_parser/SimpleObject.h	/^        T _p[N];$/;"	m	class:Raytracer::Array
a	core/kdtree.h	/^	KdNode* a;$/;"	m	class:Raytracer::KdTree
aPos	core/kdtree.h	/^	Vec3f aPos;$/;"	m	class:Raytracer::KdTree
add	core/kdtree.h	/^	void add(Photon* x){$/;"	f	class:Raytracer::KdTree
add	core/kdtree.h	/^	void add(Triangle* x){$/;"	f	class:Raytracer::KdTreeTri
addLight	core/scene.h	/^	void addLight(Light *aLight){$/;"	f	class:Raytracer::Scene
addObject	core/scene.h	/^	void addObject(Primitive *aObject){$/;"	f	class:Raytracer::Scene
addToHeap	core/kdtree.cpp	/^void KdTree::addToHeap(Photon* t){$/;"	f	class:Raytracer::KdTree
argMax	core/geometry.h	/^	int argMax() const{$/;"	f	class:Raytracer::Vec3f
argMaxDiff	shapes/box.h	/^	int argMaxDiff(){$/;"	f	class:Raytracer::Box
b	core/geometry.h	/^			real r,g,b;$/;"	m	struct:Raytracer::Vec3f::__anon1::__anon4
b	core/kdtree.h	/^		Box* b;$/;"	m	struct:Raytracer::KdTree::KdNode
build	core/kdtree.cpp	/^void KdTree::build(int root, int l, int r){$/;"	f	class:Raytracer::KdTree
build	core/kdtree.cpp	/^void KdTreeTri::build(KdNode* root, const vector<Triangle* > a, short lastDim){$/;"	f	class:Raytracer::KdTreeTri
buildLeaf	core/kdtree.cpp	/^void KdTreeTri::buildLeaf(KdNode *root, const vector<Triangle* > a, int l, int r){$/;"	f	class:Raytracer::KdTreeTri
calcShade	core/scene.cpp	/^real Scene::calcShade(Light* light, Vec3f pos, Vec3f& dir){$/;"	f	class:Raytracer::Scene
ch	core/kdtree.h	/^		short ch;$/;"	m	struct:Raytracer::KdTree::KdNode
chg	shapes/trianglemesh.h	/^	int chg(int x){$/;"	f	class:Raytracer::TriangleMesh
clear	core/kdtree.h	/^	void clear(){$/;"	f	class:Raytracer::KdTree
clear	core/kdtree.h	/^	void clear(){$/;"	f	class:Raytracer::KdTreeTri
construct	core/kdtree.cpp	/^void KdTreeTri::construct(){$/;"	f	class:Raytracer::KdTreeTri
construct	core/kdtree.h	/^	void construct(){$/;"	f	class:Raytracer::KdTree
construct	core/scene.h	/^	void construct(){$/;"	f	class:Raytracer::Scene
cross	core/geometry.h	/^inline Vec3f cross(const Vec3f &A, const Vec3f &B){$/;"	f	namespace:Raytracer
d	core/geometry.h	/^	Vec3f d;$/;"	m	class:Raytracer::Ray
del	core/kdtree.cpp	/^void KdTreeTri::del(KdNode* root){$/;"	f	class:Raytracer::KdTreeTri
det	core/geometry.h	/^inline real det(const Vec3f &A, const Vec3f &B, const Vec3f &C){$/;"	f	namespace:Raytracer
dim	core/kdtree.h	/^		short dim;$/;"	m	struct:Raytracer::KdTree::KdNode
dim	core/kdtree.h	/^		short isLeaf, dim;$/;"	m	struct:Raytracer::KdTreeTri::KdNode
dot	core/geometry.h	/^inline real dot(const Vec3f &A, const Vec3f &B){$/;"	f	namespace:Raytracer
findKNearest	core/kdtree.cpp	/^void KdTree::findKNearest(int root){$/;"	f	class:Raytracer::KdTree
g	core/geometry.h	/^			real r,g,b;$/;"	m	struct:Raytracer::Vec3f::__anon1::__anon4
generateRay	core/camera.cpp	/^Ray ProjectiveCamera::generateRay(real dx, real dy, int i, int j){$/;"	f	class:Raytracer::ProjectiveCamera
generateRays	core/camera.cpp	/^vector<Ray> ProjectiveCamera::generateRays(){$/;"	f	class:Raytracer::ProjectiveCamera
getAxis	core/photon.h	/^	real getAxis(int dim) const{$/;"	f	class:Raytracer::Photon
getBBox	shapes/trianglemesh.h	/^	Box getBBox(){$/;"	f	class:Raytracer::Triangle
getCamera	core/renderer.h	/^	Camera* getCamera(){$/;"	f	class:Raytracer::Renderer
getColor	core/intersection.h	/^	Color getColor() const{$/;"	f	class:Raytracer::Intersection
getColor	core/light.h	/^	Vec3f getColor(){$/;"	f	class:Raytracer::Light
getColor	core/material.h	/^	Color getColor(){$/;"	f	class:Raytracer::Material
getColor	core/material.h	/^	Color getColor(real u, real v){$/;"	f	class:Raytracer::Material
getColor	core/primitive.h	/^	virtual Color getColor(Vec3f pos){$/;"	f	class:Raytracer::Primitive
getColor	core/texture.cpp	/^Color Texture::getColor(real u, real v)$/;"	f	class:Raytracer::Texture
getColor	film/image.cpp	/^Color Image::getColor(int x, int y){$/;"	f	class:Raytracer::Image
getDiffuse	core/material.h	/^	real getDiffuse(){$/;"	f	class:Raytracer::Material
getDist	core/intersection.h	/^	real getDist()  const{$/;"	f	class:Raytracer::Intersection
getFilm	core/camera.h	/^	Film* getFilm(){$/;"	f	class:Raytracer::Camera
getH	core/film.h	/^	int getH(){$/;"	f	class:Raytracer::Film
getKNearest	core/kdtree.cpp	/^int KdTree::getKNearest(const Vec3f& pos, int K){$/;"	f	class:Raytracer::KdTree
getKa	core/material.h	/^	Color getKa(){$/;"	f	class:Raytracer::Material
getKthPhoton	core/kdtree.h	/^	pair<real, Photon* > getKthPhoton(int k){$/;"	f	class:Raytracer::KdTree
getLi	core/scene.cpp	/^Color Scene::getLi(const Ray& ray, const Intersection& isect){$/;"	f	class:Raytracer::Scene
getMaterial	core/primitive.h	/^	Material* getMaterial(){$/;"	f	class:Raytracer::Primitive
getMid	shapes/box.h	/^	real getMid(int dim){$/;"	f	class:Raytracer::Box
getName	core/primitive.h	/^	char* getName(){$/;"	f	class:Raytracer::Primitive
getNorm	core/intersection.h	/^	Vec3f getNorm() const{$/;"	f	class:Raytracer::Intersection
getNorm	core/material.h	/^	Vec3f getNorm(real u, real v){$/;"	f	class:Raytracer::Material
getNorm	shapes/trianglemesh.h	/^	Vec3f getNorm(Vec3f pos){}$/;"	f	class:Raytracer::TriangleMesh
getPos	core/camera.h	/^	Vec3f getPos(){$/;"	f	class:Raytracer::Camera
getPos	core/intersection.h	/^	Vec3f getPos() const{$/;"	f	class:Raytracer::Intersection
getPos	core/light.h	/^	Vec3f getPos(){$/;"	f	class:Raytracer::Light
getPos	core/light.h	/^	Vec3f getPos(real u, real v){$/;"	f	class:Raytracer::AreaLight
getPos	core/light.h	/^	virtual Vec3f getPos(real u, real v){$/;"	f	class:Raytracer::Light
getPos	core/photon.h	/^	Vec3f getPos() const{$/;"	f	class:Raytracer::Photon
getPrim	core/intersection.h	/^	Primitive* getPrim() const{$/;"	f	class:Raytracer::Intersection
getReflection	core/material.h	/^	real getReflection(){$/;"	f	class:Raytracer::Material
getRefrIndex	core/material.h	/^	real getRefrIndex(){$/;"	f	class:Raytracer::Material
getRefraction	core/material.h	/^	real getRefraction(){$/;"	f	class:Raytracer::Material
getScene	core/renderer.h	/^	Scene* getScene(){$/;"	f	class:Raytracer::Renderer
getSide	shapes/trianglemesh.h	/^	int getSide(int dim, real split){$/;"	f	class:Raytracer::Triangle
getSpecular	core/material.h	/^	real getSpecular(){$/;"	f	class:Raytracer::Material
getTexture	core/material.h	/^	Texture* getTexture(){$/;"	f	class:Raytracer::Material
getTriangles	shapes/trianglemesh.h	/^	vector<Triangle*> getTriangles(){$/;"	f	class:Raytracer::TriangleMesh
getType	core/light.h	/^	string getType(){$/;"	f	class:Raytracer::AreaLight
getType	core/light.h	/^	virtual string getType(){$/;"	f	class:Raytracer::Light
getType	shapes/box.h	/^	string getType(){$/;"	f	class:Raytracer::Box
getType	shapes/plane.h	/^	string getType(){$/;"	f	class:Raytracer::Plane
getType	shapes/sphere.h	/^	string getType(){$/;"	f	class:Raytracer::Sphere
getType	shapes/trianglemesh.h	/^	string getType(){$/;"	f	class:Raytracer::Triangle
getType	shapes/trianglemesh.h	/^	string getType(){$/;"	f	class:Raytracer::TriangleMesh
getW	core/film.h	/^	int getW(){$/;"	f	class:Raytracer::Film
h	core/film.h	/^	int w, h;$/;"	m	class:Raytracer::Film
haveTexture	core/material.h	/^	bool haveTexture(){$/;"	f	class:Raytracer::Material
init	shapes/box.h	/^	void init(const Vec3f &A){$/;"	f	class:Raytracer::Box
inside	shapes/trianglemesh.cpp	/^bool Triangle::inside(const Vec3f pos){$/;"	f	class:Raytracer::Triangle
intersect	core/scene.cpp	/^int Scene::intersect(const Ray& ray, Intersection& isect){$/;"	f	class:Raytracer::Scene
intersect	shapes/box.cpp	/^int Box::intersect(const Ray& ray, Intersection& isect){$/;"	f	class:Raytracer::Box
intersect	shapes/plane.cpp	/^int Plane::intersect(const Ray& ray, Intersection& isect){$/;"	f	class:Raytracer::Plane
intersect	shapes/sphere.cpp	/^int Sphere::intersect(const Ray& ray, Intersection& isect){$/;"	f	class:Raytracer::Sphere
intersect	shapes/trianglemesh.cpp	/^int Triangle::intersect(const Ray& ray, Intersection& isect){$/;"	f	class:Raytracer::Triangle
intersect	shapes/trianglemesh.cpp	/^int TriangleMesh::intersect(const Ray& ray, Intersection& isect){$/;"	f	class:Raytracer::TriangleMesh
intersectP	core/scene.cpp	/^int Scene::intersectP(const Ray& ray){$/;"	f	class:Raytracer::Scene
intersectP	shapes/box.cpp	/^int Box::intersectP(const Ray& aRay){$/;"	f	class:Raytracer::Box
intersectP	shapes/plane.cpp	/^int Plane::intersectP(const Ray& aRay){$/;"	f	class:Raytracer::Plane
intersectP	shapes/sphere.cpp	/^int Sphere::intersectP(const Ray& aRay){$/;"	f	class:Raytracer::Sphere
intersectP	shapes/trianglemesh.cpp	/^int Triangle::intersectP(const Ray& ray){$/;"	f	class:Raytracer::Triangle
intersectP	shapes/trianglemesh.h	/^	int intersectP(const Ray& ray){}$/;"	f	class:Raytracer::TriangleMesh
isLeaf	core/kdtree.h	/^		short isLeaf, dim;$/;"	m	struct:Raytracer::KdTreeTri::KdNode
left	core/kdtree.h	/^		KdNode* left;$/;"	m	struct:Raytracer::KdTreeTri::KdNode
length	core/geometry.h	/^	inline real length(){$/;"	f	class:Raytracer::Vec3f
m	core/kdtree.h	/^	int n, m;$/;"	m	class:Raytracer::KdTree
m	core/transform.h	/^	Matrix44 m;$/;"	m	class:Raytracer::Transform
m	core/transform.h	/^	real m[4][4];$/;"	m	struct:Raytracer::Matrix44
mAggregate	core/scene.h	/^	KdTreeTri mAggregate;$/;"	m	class:Raytracer::Scene
mAmbient	core/scene.h	/^	Color mAmbient;$/;"	m	class:Raytracer::Scene
mArc	core/camera.h	/^	real mFov, mArc;$/;"	m	class:Raytracer::ProjectiveCamera
mBoundingBox	shapes/trianglemesh.h	/^	Box* mBoundingBox;$/;"	m	class:Raytracer::TriangleMesh
mCamera	core/renderer.h	/^	Camera* mCamera;$/;"	m	class:Raytracer::Renderer
mCentre	shapes/sphere.h	/^	Vec3f mCentre;$/;"	m	class:Raytracer::Sphere
mColor	core/intersection.h	/^	Color mColor;$/;"	m	class:Raytracer::Intersection
mColor	core/light.h	/^	Color mColor;$/;"	m	class:Raytracer::Light
mColor	core/material.h	/^	Color mColor;$/;"	m	class:Raytracer::Material
mD	shapes/plane.h	/^	real mD;$/;"	m	class:Raytracer::Plane
mD	shapes/trianglemesh.h	/^	real mD;$/;"	m	class:Raytracer::Triangle
mData	core/kdtree.h	/^	vector<Photon* > mData;$/;"	m	class:Raytracer::KdTree
mData	core/kdtree.h	/^	vector<Triangle* > mData;$/;"	m	class:Raytracer::KdTreeTri
mDiff	core/material.h	/^	real mDiff, mSpec;$/;"	m	class:Raytracer::Material
mDim	core/kdtree.cpp	/^int KdTree::mDim;$/;"	m	class:Raytracer::KdTree	file:
mDim	core/kdtree.h	/^	int mDim;$/;"	m	class:Raytracer::KdTreeTri
mDim	core/kdtree.h	/^	static int mDim;$/;"	m	class:Raytracer::KdTree
mDist	core/intersection.h	/^	real mDist;$/;"	m	class:Raytracer::Intersection
mDist	core/kdtree.h	/^	real mDist;$/;"	m	class:Raytracer::KdTree
mFilm	core/camera.h	/^	Film* mFilm;$/;"	m	class:Raytracer::Camera
mFilmX	core/geometry.h	/^	int mFilmX, mFilmY;$/;"	m	class:Raytracer::Ray
mFilmY	core/geometry.h	/^	int mFilmX, mFilmY;$/;"	m	class:Raytracer::Ray
mFocalDistance	core/camera.h	/^	real mLensRadius, mFocalDistance;$/;"	m	class:Raytracer::PerspectiveCamera
mFov	core/camera.h	/^	real mFov, mArc;$/;"	m	class:Raytracer::ProjectiveCamera
mI	core/camera.h	/^	Vec3f mI, mJ;$/;"	m	class:Raytracer::ProjectiveCamera
mImg	core/texture.h	/^	Film* mImg;$/;"	m	class:Raytracer::Texture
mImg	film/image.h	/^	Mat mImg;$/;"	m	class:Raytracer::Image
mJ	core/camera.h	/^	Vec3f mI, mJ;$/;"	m	class:Raytracer::ProjectiveCamera
mKa	core/material.h	/^	Color mKa;$/;"	m	class:Raytracer::Material
mLensRadius	core/camera.h	/^	real mLensRadius, mFocalDistance;$/;"	m	class:Raytracer::PerspectiveCamera
mLights	core/scene.h	/^	vector<Light* > mLights;$/;"	m	class:Raytracer::Scene
mLimit	core/kdtree.h	/^	int mLimit;$/;"	m	class:Raytracer::KdTree
mLookAt	core/camera.h	/^	Vec3f mLookAt;$/;"	m	class:Raytracer::ProjectiveCamera
mMaterial	core/primitive.h	/^	Material* mMaterial;$/;"	m	class:Raytracer::Primitive
mMax	shapes/box.h	/^	Vec3f mMin, mMax;$/;"	m	class:Raytracer::Box
mMin	shapes/box.h	/^	Vec3f mMin, mMax;$/;"	m	class:Raytracer::Box
mName	core/film.h	/^	char *mName;$/;"	m	class:Raytracer::Film
mName	core/primitive.h	/^	char* mName;$/;"	m	class:Raytracer::Primitive
mNorm	core/intersection.h	/^	Vec3f mNorm;$/;"	m	class:Raytracer::Intersection
mNorm	core/light.h	/^	Vec3f mNorm, mU, mV;$/;"	m	class:Raytracer::AreaLight
mNorm	shapes/plane.h	/^	Vec3f mNorm;$/;"	m	class:Raytracer::Plane
mNorm	shapes/trianglemesh.h	/^	Vec3f A, B, C, mNorm; \/\/, mU, mV;$/;"	m	class:Raytracer::Triangle
mPos	core/camera.h	/^	Vec3f mPos;$/;"	m	class:Raytracer::Camera
mPos	core/intersection.h	/^	Vec3f mPos;$/;"	m	class:Raytracer::Intersection
mPos	core/light.h	/^	Vec3f mPos;$/;"	m	class:Raytracer::Light
mPos	core/photon.h	/^	Vec3f mPos;$/;"	m	class:Raytracer::Photon
mPrim	core/intersection.h	/^	Primitive* mPrim;$/;"	m	class:Raytracer::Intersection
mPrimitives	core/scene.h	/^	vector<Primitive* > mPrimitives;$/;"	m	class:Raytracer::Scene
mRIndex	core/material.h	/^	real mRIndex;$/;"	m	class:Raytracer::Material
mRadius	shapes/sphere.h	/^	real mRadius;$/;"	m	class:Raytracer::Sphere
mRaysCast	renderers/testrenderer.h	/^	int mRaysCast;$/;"	m	class:Raytracer::TestRenderer
mRefl	core/material.h	/^	real mRefl, mRefr;$/;"	m	class:Raytracer::Material
mRefr	core/material.h	/^	real mRefl, mRefr;$/;"	m	class:Raytracer::Material
mScene	core/renderer.h	/^	Scene* mScene;$/;"	m	class:Raytracer::Renderer
mSpec	core/material.h	/^	real mDiff, mSpec;$/;"	m	class:Raytracer::Material
mSqRadius	shapes/sphere.h	/^	real mSqRadius;$/;"	m	class:Raytracer::Sphere
mTexture	core/material.h	/^	Texture* mTexture;$/;"	m	class:Raytracer::Material
mTriangles	shapes/trianglemesh.h	/^	vector<Triangle*> mTriangles;$/;"	m	class:Raytracer::TriangleMesh
mType	core/texture.h	/^	int mType;$/;"	m	class:Raytracer::Texture
mU	core/light.h	/^	Vec3f mNorm, mU, mV;$/;"	m	class:Raytracer::AreaLight
mU	shapes/plane.h	/^	Vec3f mU, mV;$/;"	m	class:Raytracer::Plane
mUScale	core/texture.h	/^	int mUScale, mVScale;$/;"	m	class:Raytracer::Texture
mV	core/light.h	/^	Vec3f mNorm, mU, mV;$/;"	m	class:Raytracer::AreaLight
mV	shapes/plane.h	/^	Vec3f mU, mV;$/;"	m	class:Raytracer::Plane
mVScale	core/texture.h	/^	int mUScale, mVScale;$/;"	m	class:Raytracer::Texture
mVertexs	shapes/trianglemesh.h	/^	vector<Vec3f> mVertexs;$/;"	m	class:Raytracer::TriangleMesh
m_nTriangles	obj_parser/SimpleObject.h	/^        int             m_nTriangles;$/;"	m	class:Raytracer::CSimpleObject
m_nVertices	obj_parser/SimpleObject.h	/^        int             m_nVertices;$/;"	m	class:Raytracer::CSimpleObject
m_pTriangleList	obj_parser/SimpleObject.h	/^        Array<int,3>*   m_pTriangleList;$/;"	m	class:Raytracer::CSimpleObject
m_pVertexList	obj_parser/SimpleObject.h	/^        Vec3f*          m_pVertexList;$/;"	m	class:Raytracer::CSimpleObject
main	main/main.cpp	/^int main()$/;"	f
maximize	core/geometry.h	/^inline void maximize(Vec3f &A, const Vec3f &B){$/;"	f	namespace:Raytracer
minDist	shapes/box.h	/^	real minDist(Vec3f pos){$/;"	f	class:Raytracer::Box
minimize	core/geometry.h	/^inline void minimize(Vec3f &A, const Vec3f &B){$/;"	f	namespace:Raytracer
mod	core/texture.h	/^	int mod(int x, int y){$/;"	f	class:Raytracer::Texture
n	core/kdtree.h	/^	int n, m;$/;"	m	class:Raytracer::KdTree
n	core/kdtree.h	/^	int n;$/;"	m	class:Raytracer::KdTreeTri
naiveSplit	core/kdtree.cpp	/^void KdTreeTri::naiveSplit(Box *A, short &dim, real &split){$/;"	f	class:Raytracer::KdTreeTri
o	core/geometry.h	/^	Vec3f o;$/;"	m	class:Raytracer::Ray
operator !=	core/geometry.h	/^	inline bool operator !=(const Vec3f &v) const{$/;"	f	class:Raytracer::Vec3f
operator ()	core/geometry.h	/^	inline Vec3f operator()(real t) const {$/;"	f	class:Raytracer::Ray
operator *	core/geometry.h	/^	friend inline Vec3f operator * ( const Vec3f& v, real f ) { return Vec3f( v.x * f, v.y * f, v.z * f ); }$/;"	f	class:Raytracer::Vec3f
operator *	core/geometry.h	/^	friend inline Vec3f operator * ( const Vec3f& v1, const Vec3f& v2 ) { return Vec3f( v1.x * v2.x, v1.y * v2.y, v1.z * v2.z ); }$/;"	f	class:Raytracer::Vec3f
operator *	core/geometry.h	/^	friend inline Vec3f operator * ( real f, const Vec3f& v ) { return Vec3f( v.x * f, v.y * f, v.z * f ); }$/;"	f	class:Raytracer::Vec3f
operator *=	core/geometry.h	/^	inline void operator *=(const Vec3f& v){$/;"	f	class:Raytracer::Vec3f
operator *=	core/geometry.h	/^	inline void operator *=(real f){$/;"	f	class:Raytracer::Vec3f
operator +	core/geometry.h	/^	friend inline Vec3f operator + ( const Vec3f& v1, const Vec3f& v2 ) { return Vec3f( v1.x + v2.x, v1.y + v2.y, v1.z + v2.z ); }$/;"	f	class:Raytracer::Vec3f
operator +=	core/geometry.h	/^	inline void operator +=(const Vec3f& v){$/;"	f	class:Raytracer::Vec3f
operator +=	core/geometry.h	/^	inline void operator +=(real f){$/;"	f	class:Raytracer::Vec3f
operator -	core/geometry.h	/^	friend inline Vec3f operator - ( const Vec3f& v1, const Vec3f& v2 ) { return Vec3f( v1.x - v2.x, v1.y - v2.y, v1.z - v2.z ); }$/;"	f	class:Raytracer::Vec3f
operator -	core/geometry.h	/^	inline Vec3f operator - () const {$/;"	f	class:Raytracer::Vec3f
operator -=	core/geometry.h	/^	inline void operator -=(const Vec3f& v){$/;"	f	class:Raytracer::Vec3f
operator -=	core/geometry.h	/^	inline void operator -=(real f){$/;"	f	class:Raytracer::Vec3f
operator /	core/geometry.h	/^	friend inline Vec3f operator \/ ( const Vec3f& v, real f ) { return Vec3f( v.x \/ f, v.y \/ f, v.z \/ f ); }$/;"	f	class:Raytracer::Vec3f
operator /=	core/geometry.h	/^	inline void operator \/=(const Vec3f& v){$/;"	f	class:Raytracer::Vec3f
operator /=	core/geometry.h	/^	inline void operator \/=(real f){$/;"	f	class:Raytracer::Vec3f
operator =	core/geometry.h	/^	inline Vec3f& operator = (const Vec3f& v){$/;"	f	class:Raytracer::Vec3f
operator []	core/geometry.h	/^	inline const real& operator [](int index) const{$/;"	f	class:Raytracer::Vec3f
operator []	core/geometry.h	/^	inline real& operator [](int index){$/;"	f	class:Raytracer::Vec3f
operator []	obj_parser/SimpleObject.h	/^        T& operator[] (int i)$/;"	f	class:Raytracer::Array
operator []	obj_parser/SimpleObject.h	/^        const T& operator[] (int i) const $/;"	f	class:Raytracer::Array
print	core/geometry.h	/^	void print() const{$/;"	f	class:Raytracer::Vec3f
prt	core/geometry.h	/^	void prt() const{$/;"	f	class:Raytracer::Ray
prt	core/geometry.h	/^	void prt() const{$/;"	f	class:Raytracer::Vec3f
r	core/geometry.h	/^			real r,g,b;$/;"	m	struct:Raytracer::Vec3f::__anon1::__anon4
rayTracing	renderers/testrenderer.cpp	/^void TestRenderer::rayTracing(Ray ray, Color& res, int depth, real aRIndex, real &aDist){$/;"	f	class:Raytracer::TestRenderer
read	core/geometry.h	/^	void read(){$/;"	f	class:Raytracer::Vec3f
read	film/image.cpp	/^void Image::read(string path){$/;"	f	class:Raytracer::Image
real	core/geometry.h	/^typedef double real;$/;"	t	namespace:Raytracer
rec_limit	core/kdtree.h	/^	const int rec_limit = 1000;$/;"	m	class:Raytracer::KdTreeTri
recurse	core/kdtree.h	/^	int recurse;$/;"	m	class:Raytracer::KdTreeTri
render	renderers/testrenderer.cpp	/^void TestRenderer::render(){$/;"	f	class:Raytracer::TestRenderer
res	core/kdtree.h	/^	pair<real, Photon* > * res;$/;"	m	class:Raytracer::KdTree
right	core/kdtree.h	/^		KdNode* right;$/;"	m	struct:Raytracer::KdTreeTri::KdNode
root	core/kdtree.h	/^	KdNode* root;$/;"	m	class:Raytracer::KdTreeTri
setCamera	core/renderer.h	/^	void setCamera(Camera* aCamera){$/;"	f	class:Raytracer::Renderer
setColor	core/intersection.h	/^	void setColor(Color aColor){$/;"	f	class:Raytracer::Intersection
setColor	core/material.h	/^	void setColor(Color &aColor){$/;"	f	class:Raytracer::Material
setColor	film/image.cpp	/^void Image::setColor(int x, int y, const Color &color){$/;"	f	class:Raytracer::Image
setDiffuse	core/material.h	/^	void setDiffuse(real aDiff){$/;"	f	class:Raytracer::Material
setDist	core/intersection.h	/^	void setDist(real aDist){$/;"	f	class:Raytracer::Intersection
setFilm	core/camera.h	/^	void setFilm(Film* aFilm){$/;"	f	class:Raytracer::Camera
setIsect	shapes/box.cpp	/^void Box::setIsect(Intersection& isect, real dist, Vec3f pos, bool backSide){$/;"	f	class:Raytracer::Box
setIsect	shapes/plane.cpp	/^void Plane::setIsect(Intersection& isect, real dist, Vec3f pos, bool backSide){$/;"	f	class:Raytracer::Plane
setIsect	shapes/sphere.cpp	/^void Sphere::setIsect(Intersection& isect, real dist, Vec3f pos, bool backSide){$/;"	f	class:Raytracer::Sphere
setIsect	shapes/trianglemesh.cpp	/^void Triangle::setIsect(Intersection& isect, real dist, Vec3f pos, bool backSide){$/;"	f	class:Raytracer::Triangle
setKa	core/material.h	/^	void setKa(Color Ka){$/;"	f	class:Raytracer::Material
setMaterial	core/primitive.h	/^	void setMaterial(Material* aMaterial){$/;"	f	class:Raytracer::Primitive
setName	core/film.h	/^	void setName(char *aName){$/;"	f	class:Raytracer::Film
setName	core/primitive.h	/^	void setName(char* aName){$/;"	f	class:Raytracer::Primitive
setNorm	core/intersection.h	/^	void setNorm(Vec3f aNorm){$/;"	f	class:Raytracer::Intersection
setPos	core/camera.h	/^	void setPos(Vec3f aPos){$/;"	f	class:Raytracer::Camera
setPos	core/intersection.h	/^	void setPos(Vec3f aPos){$/;"	f	class:Raytracer::Intersection
setPrim	core/intersection.h	/^	void setPrim(Primitive* aPrim){$/;"	f	class:Raytracer::Intersection
setReflection	core/material.h	/^	void setReflection(real aRefl){$/;"	f	class:Raytracer::Material
setRefrIndex	core/material.h	/^	void setRefrIndex(real aRIndex){$/;"	f	class:Raytracer::Material
setRefraction	core/material.h	/^	void setRefraction(real aRefr){$/;"	f	class:Raytracer::Material
setScene	core/renderer.h	/^	void setScene(Scene* aScene){$/;"	f	class:Raytracer::Renderer
setSpecular	core/material.h	/^	void setSpecular(real aDiff){$/;"	f	class:Raytracer::Material
setTexture	core/material.h	/^	void setTexture(Texture* aTexture){$/;"	f	class:Raytracer::Material
show	film/image.cpp	/^void Image::show(){$/;"	f	class:Raytracer::Image
show	renderers/testrenderer.cpp	/^void TestRenderer::show(){$/;"	f	class:Raytracer::TestRenderer
split	core/kdtree.h	/^		real split;$/;"	m	struct:Raytracer::KdTree::KdNode
split	core/kdtree.h	/^		real split;$/;"	m	struct:Raytracer::KdTreeTri::KdNode
t	core/kdtree.h	/^		Photon* t;$/;"	m	struct:Raytracer::KdTree::KdNode
t_Val	obj_parser/SimpleObject.h	/^        typedef T t_Val; $/;"	t	class:Raytracer::Array
toColor	film/image.cpp	/^Color Image::toColor(const Vec3b &c){$/;"	f	class:Raytracer::Image
toVec3b	film/image.cpp	/^Vec3b Image::toVec3b(const Color &c){$/;"	f	class:Raytracer::Image
update	shapes/box.h	/^	void update(const Box &A){$/;"	f	class:Raytracer::Box
update	shapes/box.h	/^	void update(const Vec3f &A){$/;"	f	class:Raytracer::Box
w	core/film.h	/^	int w, h;$/;"	m	class:Raytracer::Film
x	core/geometry.h	/^			real x,y,z;$/;"	m	struct:Raytracer::Vec3f::__anon1::__anon3
x	core/kdtree.h	/^		Triangle* x;$/;"	m	struct:Raytracer::KdTreeTri::KdNode
y	core/geometry.h	/^			real x,y,z;$/;"	m	struct:Raytracer::Vec3f::__anon1::__anon3
z	core/geometry.h	/^			real x,y,z;$/;"	m	struct:Raytracer::Vec3f::__anon1::__anon3
~CSimpleObject	obj_parser/SimpleObject.cpp	/^    CSimpleObject::~CSimpleObject(void)$/;"	f	class:Raytracer::CSimpleObject
~Camera	core/camera.h	/^	virtual ~Camera(){$/;"	f	class:Raytracer::Camera
~KdTree	core/kdtree.h	/^	~KdTree(){$/;"	f	class:Raytracer::KdTree
~KdTreeTri	core/kdtree.h	/^	~KdTreeTri(){$/;"	f	class:Raytracer::KdTreeTri
~Vec3f	core/geometry.h	/^	virtual ~Vec3f(){}$/;"	f	class:Raytracer::Vec3f
